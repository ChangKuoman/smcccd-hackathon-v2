---
title: "Data Analysis"
author: "Samanta Chang"
format: html
editor: visual
toc: true
toc-title: "Table of Contents"
df-print: paged
---

```{r}
data.frame(
  Variable = c("Name", "Role", "KDA", "WRate", "PickRate", "RolePerc", "BanPerc"),
  Description = c("Name of the champion", 
                  "Role of the champion in a game", 
                  "Average kills, deaths and assists associated with each champion",
                  "Win rates of each champion",
                  "Pick rates of each champion",
                  "Percent of time the champion is used in the expected role",
                  "Ban percentages associated with each champion")
)
```

```{r echo=FALSE, results='hide', message = FALSE, warning=FALSE}
options(repos = "https://cran.r-project.org")
paquetes <- c("readr", "dplyr", "ggplot2","ggmosaic","fitdistrplus", "janitor", "stringr", "factoextra", "ggcorrplot", "randomForest") 

for (paquete in paquetes) {
  if (!require(paquete, character.only = TRUE)) {
    install.packages(paquete, quiet = TRUE)
    library(paquete, character.only = TRUE)
  }
}
```

```{r message = FALSE}
DF1 <- read_csv("data/patch1.csv")
DF2 <- read_csv("data/patch2.csv")
source("scripts/data_cleaning.R")
DF1N <- data_cleaning(DF1)
DF2N <- data_cleaning(DF2)
```

```{r}
DFT <- DF2N %>%
  inner_join(DF1N, by = "name", suffix = c("_p2", "_p1")) %>%
  mutate(w_rate_diff = w_rate_p2 - w_rate_p1,
         pick_rate_diff = pick_rate_p2 - pick_rate_p1,
         ban_perc_diff = ban_perc_p2 - ban_perc_p1,
         role_perc_diff = role_perc_p2 - role_perc_p1,
         role_diff = role_p1 != role_p2,
         kda_diff = kda_p2 - kda_p1) %>%
  arrange(desc(w_rate_diff))
DFT
```
```{r}
sw <- data.frame(
  Variable = c(
    "name", 
    "role_p1", "kda_p1", "w_rate_p1", "pick_rate_p1", "role_perc_p1", "ban_perc_p1",
    "role_p2", "kda_p2", "w_rate_p2", "pick_rate_p2", "role_perc_p2", "ban_perc_p2",
    "role_diff", "kda_diff", "w_rate_diff", "pick_rate_diff", "role_perc_diff", "ban_perc_diff"),
  Description = c("Name of the champion", 
                  
                  "Role of the champion in the game - patch 12.22", 
                  "Average kills, deaths and assists of the champion - patch 12.22",
                  "Win rate of the champion - patch 12.22",
                  "Pick rate of the champion - patch 12.22",
                  "Percent of time the champion is used in the expected role - patch 12.22",
                  "Ban percentage of the champion - patch 12.22",
                  
                  "Role of the champion in the game - patch 12.23", 
                  "Average kills, deaths and assists of the champion - patch 12.23",
                  "Win rate of the champion - patch 12.23",
                  "Pick rate of the champion - patch 12.23",
                  "Percent of time the champion is used in the expected role - patch 12.23",
                  "Ban percentage of the champion - patch 12.23",
                  
                  "Indicates if the role of the champion changed between patches", 
                  "Difference on the average kills, deaths and assists of the champion between patches",
                  "Difference on the win rate of the champion between patches",
                  "Difference on pick rate of the champion between patches",
                  "Difference on the percent of time the champion is used in the expected role between patches",
                  "Difference on the ban percentage of the champion between patches"),
  DataType = c("CHAR", 
               "CHAR", "NUMERIC", "NUMERIC", "NUMERIC", "NUMERIC", "NUMERIC",
               "CHAR", "NUMERIC", "NUMERIC", "NUMERIC", "NUMERIC", "NUMERIC",
               "BOOLEAN", "NUMERIC", "NUMERIC", "NUMERIC", "NUMERIC", "NUMERIC")
)
print(sw)
```

```{r message = FALSE}
source("scripts/boxplot_g.R")
source("scripts/boxplot_gv.R")
source("scripts/outliers_f.R")
source("scripts/norm.R")
source("scripts/histograma.R")
```

```{r}
boxplot_g(DFT, "w_rate_p1", "Win Rate")

boxplot_gv(
  DFT,
  x_col = "role_p1", y_col = "w_rate_p1",
  title = "Graph: Win Rate by Role Patch 1",
  x_title = "Role", y_title = "Win Rate %"
)
```

```{r}
cv_general <- DFT %>%
  summarise(
    role_p1 = "General",
    cv = (sd(w_rate_p1, na.rm = TRUE) / mean(w_rate_p1, na.rm = TRUE)) * 100
  )

cv_por_rol <- DFT %>%
  group_by(role_p1) %>%
  summarise(
    cv = (sd(w_rate_p1, na.rm = TRUE) / mean(w_rate_p1, na.rm = TRUE)) * 100
  )

cv_completo <- bind_rows(cv_por_rol, cv_general)
cv_completo
save(cv_completo, file = "cv_completo.RData")
```

```{r}
outliers <- find_outliers_group(DFT, "role_p1", "w_rate_p1")
to <- outliers$top %>% dplyr::select(name, ends_with("_diff"))
bo <- outliers$bottom %>% dplyr::select(name, ends_with("_diff"))
t <- find_outliers(DFT, "role_p1", "w_rate_p1")
tg <- t %>% dplyr::select(name, ends_with("_diff"))

to
bo
tg
```


============================

```{r}
boxplot_g(DFT, "w_rate_p2", "Win Rate")

boxplot_gv(
  DFT,
  x_col = "role_p1", y_col = "w_rate_p2",
  title = "Graph: Win Rate by Role Patch 2",
  x_title = "Role", y_title = "Win Rate %"
)
```

```{r}
cv_general <- DFT %>%
  summarise(
    role_p1 = "General",
    cv = (sd(w_rate_p2, na.rm = TRUE) / mean(w_rate_p2, na.rm = TRUE)) * 100
  )

cv_por_rol <- DFT %>%
  group_by(role_p1) %>%
  summarise(
    cv = (sd(w_rate_p2, na.rm = TRUE) / mean(w_rate_p2, na.rm = TRUE)) * 100
  )

cv_completo2 <- bind_rows(cv_por_rol, cv_general)
cv_completo2
```


```{r}
df1 <- as.data.frame(cv_completo)
df2 <- as.data.frame(cv_completo2)

df1$cv <- as.numeric(df1$cv)
df2$cv <- as.numeric(df2$cv)

comparado <- merge(df1, df2, by = "role_p1", suffixes = c("_1", "_2"))

comparado$diferencia <- comparado$cv_2 - comparado$cv_1

print(comparado)


```

=============

densidad

```{r warning=FALSE}
norm(DFT, "w_rate_p1", "Win Rate Patch 1")
```

```{r warning=FALSE}
norm(DFT, "w_rate_p2", "Win Rate Patch 2")
```
==================

```{r}
var1 = "w_rate_p1"
var2 = "w_rate_p2"
data = DFT
y1 <- data[[var1]]
y2 <- data[[var2]]

# Compute densities
dens1 <- density(y1, na.rm = TRUE)
dens2 <- density(y2, na.rm = TRUE)

# Get max y for ylim
max_y <- max(dens1$y, dens2$y)

# Plot the first density
plot(dens1,
     col = "red",
     lwd = 3,
     main = paste("Density Plot: Win Rates"),
     xlab = "Win Rate",
     ylab = "Density",
     ylim = c(0, max_y * 1.1))

# Add the second density
lines(dens2, col = "green", lwd = 3)

# Add theoretical curves
x1 <- seq(min(y1, na.rm = TRUE), max(y1, na.rm = TRUE), 0.1)
x2 <- seq(min(y2, na.rm = TRUE), max(y2, na.rm = TRUE), 0.1)

lines(x1, dnorm(x1, mean(y1, na.rm = TRUE), sd(y1, na.rm = TRUE)),
      col = "blue", lwd = 2, lty = 2)
lines(x2, dnorm(x2, mean(y2, na.rm = TRUE), sd(y2, na.rm = TRUE)),
      col = "purple", lwd = 2, lty = 2)

# Legend
legend("topleft",
       c("Observed 12.22", "Observed 12.23", "Theoretical 12.22", "Theoretical 12.23"),
       col = c("red", "green", "blue", "purple"),
       lty = c(1, 1, 2, 2),
       lwd = 2,
       bty = "n",
       cex = 0.8)

```
================

```{r warning=FALSE}
histograma(DFT, "w_rate_p1", "Win Rate", "Win Rate Patch 12.22")
```
```{r warning=FALSE}
histograma(DFT, "w_rate_p2", "Win Rate", "Win Rate Patch 12.23")
```
```{r warning=FALSE}
histograma(DFT, "w_rate_diff", "Win Rate", "Win Rate Difference")
```

==========

HASTA AQUI TODO BIEN

```{r warning=FALSE}
source("scripts/regresion_lineal.R")
regresion_lineal(
  DFT,
  x_col = "w_rate_diff",
  y_col = "kda_diff",
  titulo = "Gráfico",
  y_lim = c(-1,1)
)
```






```{r}
# Predicción simple con clustering k-means sobre métricas delta
set.seed(123)
cluster_data <- DFT %>% dplyr::select(w_rate_p1, ban_perc_p1, kda_p1)
kmeans_result <- kmeans(scale(cluster_data), centers = 3, nstart = 25)
DFT$cluster <- as.factor(kmeans_result$cluster)

# Visualización de clustering
fviz_cluster(kmeans_result, data = scale(cluster_data), geom = "point", ellipse.type = "norm", main = "Clustering de Campeones según Cambios en Métricas")
```

```{r}
names(DFT)
```

```{r}
# Install required package if not already installed
if (!require(dbscan)) install.packages("dbscan")

library(dbscan)

# Preprocess the data
cluster_data <- DFT %>% dplyr::select(w_rate_diff, pick_rate_diff, ban_perc_diff)

# Standardize the data (important for DBSCAN)
cluster_data_scaled <- scale(cluster_data)

# Apply DBSCAN
# eps is the maximum distance between two points to be considered as in the same neighborhood
# minPts is the minimum number of points required to form a cluster
dbscan_result <- dbscan(cluster_data_scaled, eps = 0.5, minPts = 5)

# Add DBSCAN cluster results to the data
DFT$dbscan_cluster <- as.factor(dbscan_result$cluster)

# Visualize the DBSCAN clustering result
library(ggplot2)
ggplot(DFT, aes(x = w_rate_diff, y = pick_rate_diff, color = dbscan_cluster)) +
  geom_point() +
  labs(title = "DBSCAN Clustering on Metrics Differences",
       x = "Win Rate Difference",
       y = "Pick Rate Difference") +
  theme_minimal()

```

```{r}


# Compute correlation matrix
cor_matrix <- DFT %>%
  select_if(is.numeric) %>%
  cor(use = "complete.obs")

# Plot heatmap
heatmap_plot <- ggcorrplot(cor_matrix, lab = TRUE, title = "Correlation Heatmap")
ggsave("images/correlation_heatmap.png", plot = heatmap_plot, width = 12, height = 10, dpi = 300)
```




random forest

```{r}
DFT <- DFT %>%
  mutate(change_patch = case_when(
    w_rate_diff > 0.05 & pick_rate_diff > 0.05 ~ "Buff",
    w_rate_diff < -0.05 & pick_rate_diff < -0.05 ~ "Nerf",
    TRUE ~ "None"
  )) %>%
  mutate(change_patch = as.factor(change_patch))

# Asegúrate de que change_patch sea factor
DFT$change_patch <- as.factor(DFT$change_patch)

# Variables del modelo (solo _p1)
features_p1 <- c("w_rate_p1", "pick_rate_p1", "ban_perc_p1", "kda_p1", "role_perc_p1")
set.seed(123)  # Set seed for reproducibility
train_indices <- sample(1:nrow(DFT), 0.7 * nrow(DFT))  # 70% for training
train_data <- DFT[train_indices, c(features_p1, "change_patch")]
test_data <- DFT[-train_indices, c(features_p1, "change_patch")]


# Entrenar el modelo
rf_model <- randomForest(change_patch ~ ., data = train_data, ntree = 40)

# Predecir en los datos de prueba
rf_pred <- predict(rf_model, test_data)

# Evaluate the model
conf_matrix <- table(Predicted = rf_pred, Actual = test_data$change_patch)
print(conf_matrix)

# Optional: Importance of variables
importance(rf_model)

# Calculate accuracy
rf_accuracy <- mean(rf_pred == test_data$change_patch)
print(paste("Random Forest Accuracy:", round(rf_accuracy * 100, 2), "%"))



precision_list <- c()

# Entrenar y evaluar el modelo con diferentes valores de ntree
for (ntree_val in seq(10, 200, by = 10)) {
  # Entrenar el modelo
  rf_model <- randomForest(change_patch ~ ., data = train_data, ntree = ntree_val)
  
  # Predecir en los datos de prueba
  rf_pred <- predict(rf_model, test_data)
  
  # Calcular la precisión
  precision <- mean(rf_pred == test_data$change_patch)
  precision_list <- c(precision_list, precision)
}

# Graficar el cambio de precisión con ntree
plot(seq(10, 200, by = 10), precision_list, type = "b", col = "blue", pch = 19,
     xlab = "Número de árboles (ntree)", ylab = "Precisión", main = "Precisión vs ntree en Random Forest")

text(seq(10, 200, by = 10), precision_list, labels = round(precision_list, 3), pos = 3, cex = 0.8, col = "red")


rf_model <- randomForest(change_patch ~ ., data = train_data, ntree = 40)

# Predecir en los datos de prueba
rf_pred <- predict(rf_model, test_data)

# Calcular la precisión
precision <- mean(rf_pred == test_data$change_patch)
precision
```



predict

```{r}
# Preparar features del parche siguiente
features_p2 <- c("w_rate_p2", "pick_rate_p2", "ban_perc_p2", "kda_p2", "role_perc_p2")
test_data <- DFT[, features_p2]
colnames(test_data) <- features_p1  # renombrar para que coincida

# Escalar como en entrenamiento
test_data_scaled <- as.data.frame(scale(test_data))

rf_future <- predict(rf_model, test_data)

DFT$rf_pred <- rf_future

DFT$rf_pred
```